mystring <- "Hello world!"
print (mystring)
Rscript /Users/Suen/Desktop/test.R
Rscript test.R
Rscript /Users/Suen/Desktop/test.R
apple <- c('red','green','yellow')
print(apple)
print(class(apple))
list1 <- list(c(2,5,3),21.3,sin)
print(list1)
M=matrix(c('a','a','b','c','b','a'),nrow = 2,ncol=3,byrow = TRUE)
print(M)
a<-array()
a<-array(c('green','yellow',dim=c(3,3,2)))
print(a)
a<-array(c('green','yellow'),dim=c(3,3,2))
print(a)
apple_colors<-c('green','green','yellow','red','red','red','green')
factor_apple<-factor(apple_colors)
print(factor_apple)
print(nlevels(factor_apple)
)
BMI<-data.frame(gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26))
print(BMI)
var_x="Hello"
print("The class of var_x is ",class(var_x),"\n")
print("The class of var_x is " class(var_x) "\n")
cat("The class of var_x is ",class(var_x),"\n")
ls()
print(ls())
print(ls(all.names = TRUE))
rm(a)
print(a)
rm(list=ls())
ls()
v <- c(3,1,TRUE,2+3i)
t <- c(4,1,FALSE,2+3i)
print(v&t)
rm(list=ls())
x=30L
if(is.integer()
if(is.integer(x)){}
if(is.integer(x)){
print("X is an integer")
}
x <- switch(
3,
"first",
"second",
"third",
"fourth"
)
print(x)
v=LETTERS[1:4]
print(v)
results2014=c(0.6215,0.2223,0.0625,0.0240,0.0067,0.0620)
barplot(results2014)
barplot(results2014,names.arg = c('ANC','DA','EFF','IFP','COPE','Others'),col=gray.colors(6),ylim = c(0,0.7),xlab = 'Parties',ylab = 'Votes(%)')
results2009 <- c(0.6590,0.1666,0,0.0455,0.0742,0.0547)
difference <- results2014-results2009
barplot(difference)
barplot(difference,names.arg = c('ANC','DA','EFF','IFP','COPE','Others'),col=gray.colors(6),ylim = c(0,0.7),xlab = 'Parties',ylab = 'Votes(%)')
barplot(difference,names.arg = c('ANC','DA','EFF','IFP','COPE','Others'),col=gray.colors(6),ylim = c(0,0.1),xlab = 'Parties',ylab = 'Votes(%)')
# WQD7004 : Programming for Data Science
# TAKE HOME EXAM PART A
# Sun Geng (S2034206)
# Part A: Q(i)
# i. Create three vectors. (3 marks)
# Part A: Q(i.a)
# a. First a vector with numerics from 5 until 20 and the number increase by
# 1.7
vec1 <- seq(5, 20, by=1.7)
vec1
# Part A: Q(i.b)
# b. Second a vector with numerics from 5 until 20 and the length of the
# vector is 9
vec2 <- seq(5, 20, length.out=9)
vec2
# Part A: Q(i.c)
# c. Third a vector that repeat sequence of (1,0,1,0) for 20 times (Use rep()
# rather than seq())
vec3 <- rep(c(1,0,1,0),20)
vec3
# Part A: Q(ii)
# ii. Subtract the first vector from the second vector and calculate the logarithm
# with base 10 for the subtracted vector.
# (1 mark)
# Vector subtraction.
vec_ii <- vec2 - vec1
vec_ii
# Calculate the logarithm with base 10
vec_ii_log10 <- log10(vec_ii)
vec_ii_log10
# Part A: Q(iii)
# iii. Divide the first vector by the second vector and make sure the generated
# values are integers.
# (1 mark)
# Vector division.
vec_iii <- vec1/vec2
vec_iii
# Make sure the generated values are integers
vec_iii_interger <- as.integer(vec_iii)
vec_iii_interger
# Part A: Q(iv)
# iv. Generate 'not' logic for the elements of the divided vectors.
# (1 mark)
vec_iii_interger_Not <- !vec_iii_interger
vec_iii_interger_Not
# Part A: Q(v)
# v. Calculate the median value for the first vector and the average value for the
# second vector.
# (1 mark)
vec1_median <- median(vec1)
vec1_median
vec2_average <- mean(vec2)
vec2_average
# Part A: Q(vi)
# vi. Verify the elements of the first vector are greater than the elements in the
# second vector.
# (1 mark)
the.greater <- vec1 > vec2
the.greater
vec1[the.greater]
# Part A: Q(vii)
# vii. Calculate the total numbers for the elements of the first vector that are
# greater than 10 and the elements in the second vector that are less than
# 15.
# (1 mark)
# Total numbers of the first vector that are
# greater than 10
vec1 > 10
vec1[vec1 > 10]
length(vec1[vec1 > 10])
# AND
# The elements in the second vector that are less than
# 15.
vec2<15
vec2[vec2<15]
length(vec2[vec2<15])
# Total Number
(vec1>10) & (vec2<15)
total_number_and <- length(which((vec1>10) & (vec2<15)))
total_number_and
# Part A: Q(viii)
# viii. Calculate the total numbers for the elements of the first vector that are
# greater than 10 or the elements in the second vector that are less than 5.
# (1 mark)
# Total numbers of the first vector that are
# greater than 10
vec1 > 10
vec1[vec1 > 10]
length(vec1[vec1 > 10])
# OR
# The elements in the second vector that are less than
# 5.
vec2<5
vec2[vec2<5]
length(vec2[vec2<5])
# Total Number
(vec1>10) | (vec2<5)
total_number_or <- length(which((vec1>10) | (vec2<5)))
total_number_or
tr <- data.matrix(tr)
#cats <- c("item_id", "store_id", "state_id", "dept_id", "cat_id",
#          "wday", "mday", "week", "month", "year",
#          "snap_CA", "snap_TX", "snap_WI") # list of categorical features
cats <- c("item_id", "store_id", "state_id", "dept_id", "cat_id",) # list of partial categorical features
library('dplyr') # data manipulation
library('vroom') # input/output
library('readr') # input/output
library('stringr') # string manipulation
library('tidyr') # data wrangling
library('purrr') # data wrangling
library('kableExtra') # display
library('ggplot2') # visualisation
library('ggthemes') # visualisation
path <- '/Users/Suen/Downloads/input/m5-forecasting-accuracy/'
train <- vroom(str_c(path,'sales_train_validation.csv'), delim = ",", col_types = cols())
prices <- vroom(str_c(path,'sell_prices.csv'), delim = ",", col_types = cols())
calendar <- read_csv(str_c(path,'calendar.csv'), col_types = cols())
sample_submit <- vroom(str_c(path,'sample_submission.csv'), delim = ",", col_types = cols())
train %>%
select(seq(1,10,1)) %>%
head(10) %>%
kable() %>%
kable_styling()
c(ncol(train),nrow(train))
train %>%
mutate(dset = if_else(str_detect(id, "validation"), "validation", "training")) %>%
count(dset)
prices %>%
head(10) %>%
kable() %>%
kable_styling()
summary(prices)
shiny::runApp('Downloads/Caloright_Search')
runApp('~/Documents/Github/caloright/Caloright.R')
runApp('~/Documents/Github/caloright/Caloright.R')
runApp('~/Documents/Github/caloright/Caloright.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp()
data(wiki)
library(jsonlite)
MySearch <- function(srsearch){
FullSearchString <- paste("http://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=",srsearch,"&format=json",sep="")
Response <- fromJSON(FullSearchString)
return(Response)
}
Response <- MySearch("Richard%20Dawkins")
Response
search_terms = john
search_terms = 'john'
message("Opening Wikipedia search for \"", search_terms, "\" in browser")
browseURL(paste0("https://en.wikipedia.org/w/index.php?search=", URLencode(search_terms)))
runApp('Downloads/Caloright_Search')
runApp()
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
fileName <- read.csv('/Users/Suen/Downloads/nutrition_cleaned.csv')
library(fmsb)
fileName
FoodName <- 'Cornstarch'
selected<- fileName[which(fileName$name==FoodName), ]
selected
selected[is.na(selected)] <- 0
radarchart(selected[,4:10])
selected
lapply(selected, function(x) x[x != 0 & !is.na(x)])
nozero <- lapply(selected, function(x) x[x != 0 & !is.na(x)])
radarchart(nozero)
radarchart(as.data.frame(nozero))
radarchart(as.data.frame(nozero)[4:8])
radarchart(as.data.frame(nozero)[,4:8])
nozero <- lapply(selected, function(x) x[x != 0 & !is.na(x)])
as.data.frame((nozero))
as.data.frame(nozero)
selected[, colSums(selected != 0) > 0]
radarchart(selected[,4:10])
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
selected <- as.data.frame(lapply(selected[4:ncol(selected)], min_max_norm))
radarchart(selected)
runApp('Downloads/Caloright_Search')
#apply Min-Max normalization to first four columns in iris dataset
selected <- as.data.frame(lapply(selected[4:10], min_max_norm))
#radarchart(selected[,4:ncol(selected)])
radarchart(selected)
fileName <- read.csv('/Users/Suen/Downloads/nutrition_cleaned.csv')
selected<- fileName[which(fileName$name==FoodName), ]
selected <- sort(as.data.frame(lapply(selected[4:10], min_max_norm)))
selected
slected
selected
fileName <- read.csv('/Users/Suen/Downloads/nutrition_cleaned.csv')
selected<- fileName[which(fileName$name==FoodName), ]
selected
selected[is.na(selected)] <- 0
selected <- selected[, colSums(selected != 0) > 0]
selected
radarchart(selected)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
data
radarchart( data)
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
selected <- sort(as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm)))
#radarchart(selected[,4:ncol(selected)])
selected
selected<- fileName[which(fileName$name==FoodName), ]
selected <- as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
selected[is.na(selected)] <- 0
selected <- selected[, colSums(selected != 0) > 0]
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
selected <- as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
selected
selected <- as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
selected<- fileName[which(fileName$name==FoodName), ]
selected
selected[is.na(selected)] <- 0
selected <- selected[, colSums(selected != 0) > 0]
selected
as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
as.data.frame(lapply(selected[4:ncol(selected)], min_max_norm))
selected
radarchart(selected)
radarchart(selected[,4:8])
hist(selected[,4:8])
plot(selected)
selected
lapply(selected[2:ncol(selected)], min_max_norm)
barplot(selected[2:ncol(selected)])
barplot(selected[,2:ncol(selected)])
radarchart(selected)
radarchart(selected[4:6])
selected[4:6]
selected[10:16]
radarchart(selected[10:16])
selected[10:16]
selected[10:16]
radarchart(selected[,10:16])
radarchart(selected[,4:6])
radarchart(selected[,4:6],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
labels = seq(from = min(x), to = max(x), length = 4))
x = c(rep(4.5,7),rep(0,7),
3.34, 3.28, 1.37, 1.12, 3.52, 4.07, 3.66)
radarchart(selected[,4:6],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
labels = seq(from = min(x), to = max(x), length = 4))
x = c(rep(4.5,7),rep(0,7),
3.34, 3.28, 1.37, 1.12, 3.52, 4.07, 3.66)
a = as.data.frame(matrix(x,nrow=3, ncol=7,byrow=T))
radarchart(a, axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
labels = seq(from = min(x), to = max(x), length = 4))
radarchart(a, axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
caxislabels = seq(from = min(x), to = max(x), length = 4))
radarchart(selected[,4:6],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
caxislabels = seq(from = min(x), to = max(x), length = 4))
radarchart(selected[,8:14],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
caxislabels = seq(from = min(x), to = max(x), length = 4))
temp = selected[,4:6]
temp
plot(temp)
plot(elected)
plot(selected)
plot(selected[4:10])
selected
par(selected)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
# Check your data, it has to look like this!
# head(data)
data
radarchart( data)
library(ggplot2)
ggplot(selected)
ggplot(selected[2:6])
selected[2:6]
ggplot(transform(selected[2:6]))
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
shiny::runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
read.csv('nutrients_cleaned.csv')
getwd()
read.csv('./nutrients_cleaned.csv')
getSrcDirectory()[1]
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
parent.frame(2)$ofile
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
shiny::runApp('Documents/Github/caloright')
shiny::runApp('Documents/Github/caloright')
shiny::runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp()
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
