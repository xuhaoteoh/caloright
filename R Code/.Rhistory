# Total numbers of the first vector that are
# greater than 10
vec1 > 10
vec1[vec1 > 10]
length(vec1[vec1 > 10])
# OR
# The elements in the second vector that are less than
# 5.
vec2<5
vec2[vec2<5]
length(vec2[vec2<5])
# Total Number
(vec1>10) | (vec2<5)
total_number_or <- length(which((vec1>10) | (vec2<5)))
total_number_or
tr <- data.matrix(tr)
#cats <- c("item_id", "store_id", "state_id", "dept_id", "cat_id",
#          "wday", "mday", "week", "month", "year",
#          "snap_CA", "snap_TX", "snap_WI") # list of categorical features
cats <- c("item_id", "store_id", "state_id", "dept_id", "cat_id",) # list of partial categorical features
library('dplyr') # data manipulation
library('vroom') # input/output
library('readr') # input/output
library('stringr') # string manipulation
library('tidyr') # data wrangling
library('purrr') # data wrangling
library('kableExtra') # display
library('ggplot2') # visualisation
library('ggthemes') # visualisation
path <- '/Users/Suen/Downloads/input/m5-forecasting-accuracy/'
train <- vroom(str_c(path,'sales_train_validation.csv'), delim = ",", col_types = cols())
prices <- vroom(str_c(path,'sell_prices.csv'), delim = ",", col_types = cols())
calendar <- read_csv(str_c(path,'calendar.csv'), col_types = cols())
sample_submit <- vroom(str_c(path,'sample_submission.csv'), delim = ",", col_types = cols())
train %>%
select(seq(1,10,1)) %>%
head(10) %>%
kable() %>%
kable_styling()
c(ncol(train),nrow(train))
train %>%
mutate(dset = if_else(str_detect(id, "validation"), "validation", "training")) %>%
count(dset)
prices %>%
head(10) %>%
kable() %>%
kable_styling()
summary(prices)
shiny::runApp('Downloads/Caloright_Search')
runApp('~/Documents/Github/caloright/Caloright.R')
runApp('~/Documents/Github/caloright/Caloright.R')
runApp('~/Documents/Github/caloright/Caloright.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp()
data(wiki)
library(jsonlite)
MySearch <- function(srsearch){
FullSearchString <- paste("http://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=",srsearch,"&format=json",sep="")
Response <- fromJSON(FullSearchString)
return(Response)
}
Response <- MySearch("Richard%20Dawkins")
Response
search_terms = john
search_terms = 'john'
message("Opening Wikipedia search for \"", search_terms, "\" in browser")
browseURL(paste0("https://en.wikipedia.org/w/index.php?search=", URLencode(search_terms)))
runApp('Downloads/Caloright_Search')
runApp()
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
fileName <- read.csv('/Users/Suen/Downloads/nutrition_cleaned.csv')
library(fmsb)
fileName
FoodName <- 'Cornstarch'
selected<- fileName[which(fileName$name==FoodName), ]
selected
selected[is.na(selected)] <- 0
radarchart(selected[,4:10])
selected
lapply(selected, function(x) x[x != 0 & !is.na(x)])
nozero <- lapply(selected, function(x) x[x != 0 & !is.na(x)])
radarchart(nozero)
radarchart(as.data.frame(nozero))
radarchart(as.data.frame(nozero)[4:8])
radarchart(as.data.frame(nozero)[,4:8])
nozero <- lapply(selected, function(x) x[x != 0 & !is.na(x)])
as.data.frame((nozero))
as.data.frame(nozero)
selected[, colSums(selected != 0) > 0]
radarchart(selected[,4:10])
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
selected <- as.data.frame(lapply(selected[4:ncol(selected)], min_max_norm))
radarchart(selected)
runApp('Downloads/Caloright_Search')
#apply Min-Max normalization to first four columns in iris dataset
selected <- as.data.frame(lapply(selected[4:10], min_max_norm))
#radarchart(selected[,4:ncol(selected)])
radarchart(selected)
fileName <- read.csv('/Users/Suen/Downloads/nutrition_cleaned.csv')
selected<- fileName[which(fileName$name==FoodName), ]
selected <- sort(as.data.frame(lapply(selected[4:10], min_max_norm)))
selected
slected
selected
fileName <- read.csv('/Users/Suen/Downloads/nutrition_cleaned.csv')
selected<- fileName[which(fileName$name==FoodName), ]
selected
selected[is.na(selected)] <- 0
selected <- selected[, colSums(selected != 0) > 0]
selected
radarchart(selected)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
data
radarchart( data)
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
selected <- sort(as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm)))
#radarchart(selected[,4:ncol(selected)])
selected
selected<- fileName[which(fileName$name==FoodName), ]
selected <- as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
selected[is.na(selected)] <- 0
selected <- selected[, colSums(selected != 0) > 0]
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
selected <- as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
selected
selected <- as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
selected<- fileName[which(fileName$name==FoodName), ]
selected
selected[is.na(selected)] <- 0
selected <- selected[, colSums(selected != 0) > 0]
selected
as.data.frame(lapply(selected[2:ncol(selected)], min_max_norm))
as.data.frame(lapply(selected[4:ncol(selected)], min_max_norm))
selected
radarchart(selected)
radarchart(selected[,4:8])
hist(selected[,4:8])
plot(selected)
selected
lapply(selected[2:ncol(selected)], min_max_norm)
barplot(selected[2:ncol(selected)])
barplot(selected[,2:ncol(selected)])
radarchart(selected)
radarchart(selected[4:6])
selected[4:6]
selected[10:16]
radarchart(selected[10:16])
selected[10:16]
selected[10:16]
radarchart(selected[,10:16])
radarchart(selected[,4:6])
radarchart(selected[,4:6],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
labels = seq(from = min(x), to = max(x), length = 4))
x = c(rep(4.5,7),rep(0,7),
3.34, 3.28, 1.37, 1.12, 3.52, 4.07, 3.66)
radarchart(selected[,4:6],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
labels = seq(from = min(x), to = max(x), length = 4))
x = c(rep(4.5,7),rep(0,7),
3.34, 3.28, 1.37, 1.12, 3.52, 4.07, 3.66)
a = as.data.frame(matrix(x,nrow=3, ncol=7,byrow=T))
radarchart(a, axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
labels = seq(from = min(x), to = max(x), length = 4))
radarchart(a, axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
caxislabels = seq(from = min(x), to = max(x), length = 4))
radarchart(selected[,4:6],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
caxislabels = seq(from = min(x), to = max(x), length = 4))
radarchart(selected[,8:14],axistype = 4, seg = 3, cglty = 3,
pty = 32, cglcol = 1, plwd = 3, pcol = 1, axislabcol = 1,
caxislabels = seq(from = min(x), to = max(x), length = 4))
temp = selected[,4:6]
temp
plot(temp)
plot(elected)
plot(selected)
plot(selected[4:10])
selected
par(selected)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
# Check your data, it has to look like this!
# head(data)
data
radarchart( data)
library(ggplot2)
ggplot(selected)
ggplot(selected[2:6])
selected[2:6]
ggplot(transform(selected[2:6]))
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
runApp('Downloads/Caloright_Search')
shiny::runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
read.csv('nutrients_cleaned.csv')
getwd()
read.csv('./nutrients_cleaned.csv')
getSrcDirectory()[1]
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
parent.frame(2)$ofile
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
runApp('Documents/Github/caloright')
shiny::runApp('Documents/Github/caloright')
shiny::runApp('Documents/Github/caloright')
fileName <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
selected<- fileName[which(fileName$Food==input$FoodName), ]
if (is.null(selected)) return()
df2 <- data.frame(t(selected[-1]))
colnames(df2) <- "count"
df2[is.na(df2)] <- 0
df2 <- cbind(category = rownames(df2), df2)
rownames(df2) <- 1:nrow(df2)
data <- df2[c(-1,-2,-3,-6,-9),]
data$count = as.numeric(as.character(data$count))
data <- data[order(data$count,decreasing = TRUE),]
data$fraction = data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",input$FoodName))
fileName <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
FoodName <- 'Rice'
selected<- fileName[which(fileName$Food==FoodName), ]
if (is.null(selected)) return()
df2 <- data.frame(t(selected[-1]))
colnames(df2) <- "count"
df2[is.na(df2)] <- 0
df2 <- cbind(category = rownames(df2), df2)
rownames(df2) <- 1:nrow(df2)
data <- df2[c(-1,-2,-3,-6,-9),]
data$count = as.numeric(as.character(data$count))
data <- data[order(data$count,decreasing = TRUE),]
data$fraction = data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",input$FoodName))
library("ggplot")
fileName <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
FoodName <- 'Rice'
selected<- fileName[which(fileName$Food==FoodName), ]
if (is.null(selected)) return()
df2 <- data.frame(t(selected[-1]))
colnames(df2) <- "count"
df2[is.na(df2)] <- 0
df2 <- cbind(category = rownames(df2), df2)
rownames(df2) <- 1:nrow(df2)
data <- df2[c(-1,-2,-3,-6,-9),]
data$count = as.numeric(as.character(data$count))
data <- data[order(data$count,decreasing = TRUE),]
data$fraction = data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",input$FoodName))
library(ggplot2)
fileName <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
FoodName <- 'Rice'
selected<- fileName[which(fileName$Food==FoodName), ]
if (is.null(selected)) return()
df2 <- data.frame(t(selected[-1]))
colnames(df2) <- "count"
df2[is.na(df2)] <- 0
df2 <- cbind(category = rownames(df2), df2)
rownames(df2) <- 1:nrow(df2)
data <- df2[c(-1,-2,-3,-6,-9),]
data$count = as.numeric(as.character(data$count))
data <- data[order(data$count,decreasing = TRUE),]
data$fraction = data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",input$FoodName))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName))
# Make the plot
ggplot(data, ) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
#coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
labs(title = paste("Top Six Componets in ",FoodName)) +
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName)) +
theme(axis.text = element_blank())
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName)) +
theme(axis.text = element_blank())
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) + # Try to remove that to see how to make a pie chart
labs(title = paste("Top Six Componets in ",FoodName)) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank())
knitr::opts_chunk$set(echo = TRUE)
cal_bmr = function(gen,wt,ht,age){
if(gen == 'M'){
66 + (13.7*wt)+5*(ht)-(6.8*age)
}else if(gen == "F"){
655 +(9.6*wt)+1.8*(ht)-(4.7*age)
}else{
print("wrong input")
}
}
# Input required
weight = 65
height = 152
age = 27
gender = 'F'
BMR = cal_bmr(gender,weight,height,age)
BMR
activity_cal = function(activity){
if(activity == 'sendetary'){
multiplier = BMR*1.2
}else if(activity == 'lightly_active'){
multiplier = BMR*1.375
}else if(activity == 'moderatly_active'){
multiplier = BMR * 1.55
}else if(activity == 'very_active'){
multiplier = BMR *1.725
}else if(activity == 'extra_active'){
multiplier = BMR*1.9
}else{
print("enter correct input")
}
}
calorie_required_based_on_activity = activity_cal('lightly_active')  ## just an example
calorie_required_based_on_activity
goal_cal = function(goal){
if(goal == "maintain_weight"){
maintain_weight = calorie_required_based_on_activity
carbs_cal = (50/100)*maintain_weight
protein_cal = (30/100)*maintain_weight
fat_cal = (20/100)*maintain_weight
return(data.frame(carbs_cal,protein_cal,fat_cal))
}else if(goal == "loose_weight"){
loose_weight = calorie_required_based_on_activity*0.9
carbs_cal = (40/100)*loose_weight
protein_cal = (30/100)*loose_weight
fat_cal = (30/100)*loose_weight
return(data.frame(carbs_cal,protein_cal,fat_cal))
}else if(goal == "gain_weight"){
gain_weight = calorie_required_based_on_activity *1.1
carbs_cal = (55/100)*gain_weight
protein_cal = (30/100)*gain_weight
fat_cal = (15/100)*gain_weight
return(data.frame(carbs_cal,protein_cal,fat_cal))
}else if(goal=="RDA Typical"){
maintain_weight = calorie_required_based_on_activity
carbs_cal = (50/100)*maintain_weight
protein_cal = (25/100)*maintain_weight
fat_cal = (25/100)*maintain_weight
return(data.frame(carbs_cal,protein_cal,fat_cal))
}else if(goal=="Muscle gain"){
maintain_weight = calorie_required_based_on_activity
carbs_cal = (55/100)*maintain_weight
protein_cal = (30/100)*maintain_weight
fat_cal = (30/100)*maintain_weight
return(data.frame(carbs_cal,protein_cal,fat_cal))
}else if(goal=="keto diet"){
maintain_weight = calorie_required_based_on_activity
carbs_cal = (8/100)*maintain_weight
protein_cal = (20/100)*maintain_weight
fat_cal = (65/100)*maintain_weight
return(data.frame(carbs_cal,protein_cal,fat_cal))
}else{
print("wrong input")
}
}
micronutrients = goal_cal("Muscle gain")
micronutrients
my_nurients_data = read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
## error in the values of oyster
my_nurients_data = my_nurients_data %>%  mutate(Calories = replace(Calories,Calories==231,458),
Carbs = replace(Carbs,Carbs==236,28),
Protein = replace(Protein,Protein == 232,21),
Fat = replace(Fat,Fat==233,23),
Sat.Fat = replace(Sat.Fat,Sat.Fat==234,8),
Fiber=replace(Fiber,Fiber==235.0,0.0))
my_nurients_data
my_nurients_data <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
getwd
getwd()
setwd('/Users/Suen/Documents/Github/caloright/')
getwd()
shiny::runApp()
fileName <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
fileName
library(ggplot2)
fileName <- read.csv("/Users/Suen/Documents/Github/caloright/nutrients_cleaned.csv",stringsAsFactors = FALSE)
library(dplyr)
filter(fileName,  Category == "Dairy products")
runApp()
fileName <- filter(fileName,  Category == "Dairy products")
filename
fileName <- filter(fileName,  Category == "Dairy products")
fileName
for(atmp in fileName['Food']) { avector <- atmp }
avector
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
function (e)
runApp()
